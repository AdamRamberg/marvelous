<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Marvelous</name>
    </assembly>
    <members>
        <member name="M:Marvelous.Marvelous.GetRandom``1(``0[])">
            <summary>
            Get a random item from the array.
            </summary>
            <param name="array">The array.</param>
            <typeparam name="T">Type of array.</typeparam>
            <returns>Random item from array.</returns>
            <exception cref="T:System.Exception">Thrown if array is null or empty.</exception>
        </member>
        <member name="M:Marvelous.Marvelous.GetOrthographicWorldScreenHeight(UnityEngine.Camera)">
            <summary>
            Get the camera's viewport world height.
            </summary>
            <param name="camera">The camera.</param>
            <returns>The height.</returns>
            <exception cref="T:System.Exception">Thrown if the camera is not orthographic.</exception>
        </member>
        <member name="M:Marvelous.Marvelous.GetOrthographicWorldScreenWidth(UnityEngine.Camera)">
            <summary>
            Get the camera's viewport world width.
            </summary>
            <param name="camera">The camera.</param>
            <returns>The width.</returns>
            <exception cref="T:System.Exception">Thrown if the camera is not orthographic.</exception>
        </member>
        <member name="M:Marvelous.Marvelous.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
            Tries to get a component on the the GameObject. If the component doesn't exists it adds it and return the newly added component.
            </summary>
            <param name="gameObject">The GameObject.</param>
            <typeparam name="T">The type of component.</typeparam>
            <returns>The existing or newly created component.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.HasComponent``1(UnityEngine.GameObject)">
            <summary>
            Check if a GameObject has a component or not.
            </summary>
            <param name="gameObject"></param>
            <typeparam name="T">The type of component.</typeparam>
            <returns>True if the component exists on the GameObject, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.AddIfNotExists``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Adds an item to the IList if it doesn't already exists.
            </summary>
            <param name="list">The IList to add an item to.</param>
            <param name="item">The item to add.</param>
            <typeparam name="T">The type of the item.</typeparam>
            <returns>True if the item was added, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.ChainableAdd``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Adds an item to the IList and then returns the IList.
            </summary>
            <param name="list">The IList to add the item to.</param>
            <param name="item">The item to add.</param>
            <typeparam name="T">The type of the item.</typeparam>
            <returns>The IList.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.Every``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            The Every method tests whether all elements in the array pass the test implemented by the provided Func.
            </summary>
            <param name="list">The IList to test.</param>
            <param name="func">The Func that implements the test.</param>
            <typeparam name="T">The type of the items in the IList.</typeparam>
            <returns>True if all elements in the IList passes the test, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.First``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first item that satisfies the condition.
            </summary>
            <param name="list">The IList to search.</param>
            <param name="condition">Condition to test.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <returns>The first item that satisfies the condition. If none found it returns default(T).</returns>
        </member>
        <member name="M:Marvelous.Marvelous.First``2(System.Collections.Generic.IList{``0},System.Func{``0,``1,System.Boolean},``1)">
            <summary>
            Returns the first item that satisfies the condition.
            </summary>
            <param name="list">The IList to search.</param>
            <param name="condition">Condition to test.</param>
            <param name="param1">The 1st parameter to send to the condition.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <returns>The first item that satisfies the condition. If none found it returns default(T).</returns>
        </member>
        <member name="M:Marvelous.Marvelous.ForEach``2(System.Collections.Generic.IList{``0},System.Action{``0,``1},``1)">
            <summary>
            Performs an action on each item in the list passing parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEach``3(System.Collections.Generic.IList{``0},System.Action{``0,``1,``2},``1,``2)">
            <summary>
            Performs an action on each item in the list passing parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <param name="param2">The 2nd parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <typeparam name="P2">The param2 type.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEach``4(System.Collections.Generic.IList{``0},System.Action{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Performs an action on each item in the list passing parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <param name="param2">The 2nd parameter to send to the action.</param>
            <param name="param3">The 3rd parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <typeparam name="P2">The param2 type.</typeparam>
            <typeparam name="P3">The param3 type.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEach``3(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Action{``1,``2},``2)">
            <summary>
            Performs an action on each selected item in the list passing parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="selector">Func that selects V from the list item that will be passed to the Action</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="V">The type returned by the selector.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEach``4(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Action{``1,``2,``3},``2,``3)">
            <summary>
            Performs an action on each selected item in the list passing parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="selector">Func that selects V from the list item that will be passed to the Action</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <param name="param2">The 2nd parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="V">The type returned by the selector.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <typeparam name="P2">The param2 type.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEach``5(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Action{``1,``2,``3,``4},``2,``3,``4)">
            <summary>
            Performs an action on each selected item in the list passing parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="selector">Func that selects V from the list item that will be passed to the Action</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <param name="param2">The 2nd parameter to send to the action.</param>
            <param name="param3">The 3rd parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="V">The type returned by the selector.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <typeparam name="P2">The param2 type.</typeparam>
            <typeparam name="P3">The param3 type.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs an action on each item in the list passing item index and parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <typeparam name="T">The type of the items.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEach``2(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32,``1},``1)">
            <summary>
            Performs an action on each item in the list passing item index and parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEach``3(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32,``1,``2},``1,``2)">
            <summary>
            Performs an action on each item in the list passing item index and parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <param name="param2">The 2nd parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <typeparam name="P2">The param2 type.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEach``4(System.Collections.Generic.IList{``0},Marvelous.Action{``0,System.Int32,``1,``2,``3},``1,``2,``3)">
            <summary>
            Performs an action on each item in the list passing item index and parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <param name="param2">The 2nd parameter to send to the action.</param>
            <param name="param3">The 3rd parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <typeparam name="P2">The param2 type.</typeparam>
            <typeparam name="P3">The param3 type.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.GetOrInstantiate``1(System.Collections.Generic.IList{``0},UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion,System.Func{``0,System.Boolean})">
            <summary>
            Get or instantiate a prefab from IList based on the test implemented by the provided Func.
            </summary>
            <param name="list">The IList to get the prefab from.</param>
            <param name="prefab">The prefab.</param>
            <param name="position">The position of the prefab returned.</param>
            <param name="quaternion">The rotation of the prefab returned.</param>
            <param name="condition">The condition to pass in order to get an already instantiated prefab from the IList.</param>
            <typeparam name="T">The type of prefab in the IList.</typeparam>
            <returns>The first prefab in the IList that satisfies the condition. If none found it returns a newly created prefab of type T.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.GetOrInstantiate(System.Collections.Generic.IList{UnityEngine.GameObject},UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion,System.Func{UnityEngine.GameObject,System.Boolean})">
            <summary>
            Get or instantiate a prefab from IList based on the test implemented by the provided Func.
            </summary>
            <param name="list">The IList to get the prefab from.</param>
            <param name="prefab">The prefab.</param>
            <param name="position">The position of the prefab returned.</param>
            <param name="quaternion">The rotation of the prefab returned.</param>
            <param name="condition">The condition to pass in order to get an already instantiated prefab from the IList.</param>
            <returns>The first prefab in the IList that satisfies the condition. If none found it returns a newly created prefab.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.InstantiateAndAdd``1(System.Collections.Generic.IList{``0},UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiates and adds the prefab to the IList.
            </summary>
            <param name="list">The IList to add the prefab to.</param>
            <param name="prefab">The prefab.</param>
            <param name="position">The position of the prefab returned.</param>
            <param name="quaternion">The rotation of the prefab returned.</param>
            <typeparam name="T">The type of prefab in the IList.</typeparam>
            <returns>The newly instantiated prefab.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.Pipe``1(System.Collections.Generic.IList{System.Func{``0,``0}})">
            <summary>
            Creates a pipe of all the Funcs in the IList.
            </summary>
            <param name="list">The IList containing the Func(s).</param>
            <typeparam name="T">The return and parameter type of the Func.</typeparam>
            <returns>A Func that is a pipe of all Funcs in the provided IList.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.Reduce``2(System.Collections.Generic.IList{``1},System.Func{``0,``0,``0},System.Func{``1,``0},``0,System.Func{``1,System.Boolean})">
            <summary>
            The Reduce method executes a reducer function (that you provide) on each element of the IList, resulting in a single output value.
            </summary>
            <param name="list">The IList to reduce.</param>
            <param name="reducer">Reducer Func.</param>
            <param name="getValue">Func to retrieve value that gets passed to the reducer.</param>
            <param name="initialValue">Initial value of the accumulator.</param>
            <param name="skip">If provided and true, skip the examined item.</param>
            <typeparam name="R">Return type.</typeparam>
            <typeparam name="T">The type of the items.</typeparam>
            <returns>A reduced value of type R.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.Reduce``3(System.Collections.Generic.IList{``1},System.Func{``0,``0,``2,``0},System.Func{``1,``0},``0,``2,System.Func{``1,System.Boolean})">
            <summary>
            The Reduce method executes a reducer function (that you provide) on each element of the IList, resulting in a single output value.
            </summary>
            <param name="list">The IList to reduce.</param>
            <param name="reducer">Reducer Func.</param>
            <param name="getValue">Func to retrieve value that gets passed to the reducer.</param>
            <param name="initialValue">Initial value of the accumulator.</param>
            <param name="reducerParam1">The 1st parameter to send to the reducer.</param>
            <param name="skip">If provided and true, skip the examined item.</param>
            <typeparam name="R">Return type.</typeparam>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">Type of reducerParam1.</typeparam>
            <returns>A reduced value of type R.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.ReturnMaxFloatReducer(System.Single,System.Single)">
            <summary>
            A reducer that returns the maximum float.
            </summary>
            <param name="acc">The accumulator.</param>
            <param name="cur">The current value.</param>
            <returns>The maximum float value.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.ReturnMinFloatReducer(System.Single,System.Single)">
            <summary>
            A reducer that returns the minimum float.
            </summary>
            <param name="acc">The accumulator.</param>
            <param name="cur">The current value.</param>
            <returns>The minimum float value.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.Some``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            The Some method tests whether at least one element in the IList passes the test implemented by the provided Func.
            </summary>
            <param name="list">The IList to test.</param>
            <param name="func">The Func that implements the test.</param>
            <typeparam name="T">The type of the items in the IList.</typeparam>
            <returns>True if at least one element in the IList passes the test, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.Some``2(System.Collections.Generic.IList{``0},System.Func{``0,``1,System.Boolean},``1)">
            <summary>
            The Some method tests whether at least one element in the IList passes the test implemented by the provided Func.
            </summary>
            <param name="list">The IList to test.</param>
            <param name="func">The Func that implements the test.</param>
            <param name="param1">The 1st parameter to send to the Func.</param>
            <typeparam name="T">The type of the items in the IList.</typeparam>
            <typeparam name="P1">The type of param1.</typeparam>
            <returns>True if at least one element in the IList passes the test, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.MergeObservables``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Merges two observables into one. It uses createCombinedModel to create what is returned on every OnNext.
            </summary>
            <param name="observable1">IObservable to be merged.</param>
            <param name="observable2">IObservable to be merged.</param>
            <param name="createCombinedModel">Used to merge and create the observable value of the new IObservable.</param>
            <param name="initialValue1">Initial value of observerable1.</param>
            <param name="initialValue2">Initial value of observerable2.</param>
            <typeparam name="T1">The type of the first IObservable.</typeparam>
            <typeparam name="T2">The type of the second IObservable.</typeparam>
            <typeparam name="M">Type of the new merged IObservable.</typeparam>
            <returns>A new IObservable of type M combining the IObservables sent in.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.MergeObservables``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Merges three observables into one. It uses createCombinedModel to create what is returned on every OnNext.
            </summary>
            <param name="observable1">IObservable to be merged.</param>
            <param name="observable2">IObservable to be merged.</param>
            <param name="observable3">IObservable to be merged.</param>
            <param name="createCombinedModel">Used to merge and create the observable value of the new IObservable.</param>
            <param name="initialValue1">Initial value of observerable1.</param>
            <param name="initialValue2">Initial value of observerable2.</param>
            <param name="initialValue3">Initial value of observerable3.</param>
            <typeparam name="T1">The type of the first IObservable.</typeparam>
            <typeparam name="T2">The type of the second IObservable.</typeparam>
            <typeparam name="T3">The type of the third IObservable.</typeparam>
            <typeparam name="M">Type of the new merged IObservable.</typeparam>
            <returns>A new IObservable of type M combining the IObservables sent in.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.MergeObservables``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Merges four observables into one. It uses createCombinedModel to create what is returned on every OnNext.
            </summary>
            <param name="observable1">IObservable to be merged.</param>
            <param name="observable2">IObservable to be merged.</param>
            <param name="observable3">IObservable to be merged.</param>
            <param name="observable4">IObservable to be merged.</param>
            <param name="createCombinedModel">Used to merge and create the observable value of the new IObservable.</param>
            <param name="initialValue1">Initial value of observerable1.</param>
            <param name="initialValue2">Initial value of observerable2.</param>
            <param name="initialValue3">Initial value of observerable3.</param>
            <param name="initialValue4">Initial value of observerable4.</param>
            <typeparam name="T1">The type of the first IObservable.</typeparam>
            <typeparam name="T2">The type of the second IObservable.</typeparam>
            <typeparam name="T3">The type of the third IObservable.</typeparam>
            <typeparam name="T4">The type of the fourth IObservable.</typeparam>
            <typeparam name="M">Type of the new merged IObservable.</typeparam>
            <returns>A new IObservable of type M combining the IObservables sent in.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.MergeObservables``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Merges five observables into one. It uses createCombinedModel to create what is returned on every OnNext.
            </summary>
            <param name="observable1">IObservable to be merged.</param>
            <param name="observable2">IObservable to be merged.</param>
            <param name="observable3">IObservable to be merged.</param>
            <param name="observable4">IObservable to be merged.</param>
            <param name="observable5">IObservable to be merged.</param>
            <param name="createCombinedModel">Used to merge and create the observable value of the new IObservable.</param>
            <param name="initialValue1">Initial value of observerable1.</param>
            <param name="initialValue2">Initial value of observerable2.</param>
            <param name="initialValue3">Initial value of observerable3.</param>
            <param name="initialValue4">Initial value of observerable4.</param>
            <param name="initialValue5">Initial value of observerable5.</param>
            <typeparam name="T1">The type of the first IObservable.</typeparam>
            <typeparam name="T2">The type of the second IObservable.</typeparam>
            <typeparam name="T3">The type of the third IObservable.</typeparam>
            <typeparam name="T4">The type of the fourth IObservable.</typeparam>
            <typeparam name="T5">The type of the fifth IObservable.</typeparam>
            <typeparam name="M">Type of the new merged IObservable.</typeparam>
            <returns>A new IObservable of type M combining the IObservables sent in.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.ClearInterval(UnityEngine.MonoBehaviour,UnityEngine.Coroutine)">
            <summary>
            Cancels a timed, action which was previously established by a call to SetInterval or SetTimeout.
            </summary>
            <param name="mb">MonoBehaviour that initiated the Coroutine.</param>
            <param name="coroutine">The coroutine to stop.</param>
        </member>
        <member name="M:Marvelous.Marvelous.SetInterval(UnityEngine.MonoBehaviour,System.Action,System.Single)">
            <summary>
            SetInterval repeatedly calls a function, with a fixed time delay between each call.
            </summary>
            <param name="mb">MonoBehaviour that is going to start the Coroutine.</param>
            <param name="function">A function to be executed every delay seconds. </param>
            <param name="delay">The time, in seconds, the timer should delay in between executions of the specified function. </param>
            <returns>The underlying Coroutine started.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.SetTimeout(UnityEngine.MonoBehaviour,System.Action,System.Single)">
            <summary>
            Sets a timer which executes a function once the timer expires. This mimics javascript's API for timers and is utilizing Unity's Coroutine API to do so.
            </summary>
            <param name="mb">MonoBehaviour that is going to start the Coroutine.</param>
            <param name="function">A function to be executed after the timer expires.</param>
            <param name="delay">The time, in seconds, the timer should wait before the specified function is executed. </param>
            <returns>The underlying Coroutine started.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.FindDeepChild(UnityEngine.Transform,System.String)">
            <summary>
            Finds a child to this transform by name. Searches not only the first level in the
            tree hierarchy of child objects, but all the children, grand children, and so on.
            </summary>
            <param name="parent">The parent Transform to perform the search on.</param>
            <param name="name">The name to look for.</param>
            <returns>The child transform by the name specified. Returns null if no child was found.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.ForEachChild(UnityEngine.Transform,System.Action{UnityEngine.Transform})">
            <summary>
            Iterates over all the children and executes the Action specified.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
        </member>
        <member name="M:Marvelous.Marvelous.ForEachChild``1(UnityEngine.Transform,System.Action{UnityEngine.Transform,``0},``0)">
            <summary>
            Iterates over all the children and executes the Action specified.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
            <param name="param1">Parameter sent to the Action.</param>
            <typeparam name="P1">Type of param1.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEachChild``2(UnityEngine.Transform,System.Action{UnityEngine.Transform,``0,``1},``0,``1)">
            <summary>
            Iterates over all the children and executes the Action specified.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
            <param name="param1">Parameter sent to the Action.</param>
            <param name="param2">Parameter sent to the Action.</param>
            <typeparam name="P1">Type of param1.</typeparam>
            <typeparam name="P2">Type of param2.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEachChild``3(UnityEngine.Transform,System.Action{UnityEngine.Transform,``0,``1,``2},``0,``1,``2)">
            <summary>
            Iterates over all the children and executes the Action specified.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
            <param name="param1">Parameter sent to the Action.</param>
            <param name="param2">Parameter sent to the Action.</param>
            <param name="param3">Parameter sent to the Action.</param>
            <typeparam name="P1">Type of param1.</typeparam>
            <typeparam name="P2">Type of param2.</typeparam>
            <typeparam name="P3">Type of param3.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEachChild(UnityEngine.Transform,System.Action{UnityEngine.Transform,System.Int32})">
            <summary>
            Iterates over all the children and executes the Action specified. Action will get passed the child's index.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
        </member>
        <member name="M:Marvelous.Marvelous.ForEachChild``1(UnityEngine.Transform,System.Action{UnityEngine.Transform,System.Int32,``0},``0)">
            <summary>
            Iterates over all the children and executes the Action specified. Action will get passed the child's index.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
            <param name="param1">Parameter sent to the Action.</param>
            <typeparam name="P1">Type of param1.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEachChild``2(UnityEngine.Transform,System.Action{UnityEngine.Transform,System.Int32,``0,``1},``0,``1)">
            <summary>
            Iterates over all the children and executes the Action specified. Action will get passed the child's index.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
            <param name="param1">Parameter sent to the Action.</param>
            <param name="param2">Parameter sent to the Action.</param>
            <typeparam name="P1">Type of param1.</typeparam>
            <typeparam name="P2">Type of param2.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.ForEachChild``3(UnityEngine.Transform,Marvelous.Action{UnityEngine.Transform,System.Int32,``0,``1,``2},``0,``1,``2)">
            <summary>
            Iterates over all the children and executes the Action specified. Action will get passed the child's index.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
            <param name="param1">Parameter sent to the Action.</param>
            <param name="param2">Parameter sent to the Action.</param>
            <param name="param3">Parameter sent to the Action.</param>
            <typeparam name="P1">Type of param1.</typeparam>
            <typeparam name="P2">Type of param2.</typeparam>
            <typeparam name="P3">Type of param3.</typeparam>
        </member>
        <member name="M:Marvelous.Marvelous.SetParent(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Sets a parent of the Transform provided.
            </summary>
            <param name="transform">The Transform to set the parent on.</param>
            <param name="parent">The parent to add to the transform.</param>
            <returns>The Transform with the new parent.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.TraverseAndExecute(UnityEngine.Transform,System.Action{UnityEngine.Transform})">
            <summary>
            Traverse all the children of the transform and executes the Action on this transform,
            as well as on all the children recursively.
            </summary>
            <param name="current">The current Transform to execute the Action on.</param>
            <param name="action">The Action to executed.</param>
        </member>
        <member name="M:Marvelous.Marvelous.TraverseExecuteAndCheck(UnityEngine.Transform,System.Func{UnityEngine.Transform,System.Boolean})">
            <summary>
            Traverse all the children of the transform and executes the Func on this transform,
            as well as on all the children.
            </summary>
            <param name="current">The current Transform to execute the Func on.</param>
            <param name="func">The Func to executed.</param>
            <returns>True if all of the funcs returns true, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.IsIntersectingAlternative(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Find out if two lines intersect.
            </summary>
            <param name="line1P1">Point 1 of line 1.</param>
            <param name="line1P2">Point 2 of line 1.</param>
            <param name="line2P1">Point 1 of line 2.</param>
            <param name="line2P2">Point 2 of line 2.</param>
            <returns>True if the 2 lines are intersecting, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.ToVector3(UnityEngine.Vector2,System.Single)">
            <summary>
            Creates a Vector3 from a Vector2.
            </summary>
            <param name="v2">The Vector2.</param>
            <param name="z">The z-value of the new Vector3.</param>
            <returns>A new Vector3 based on the Vector2.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.TowardsTarget(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Calculates a new position based on the origin in the direction of the target.
            </summary>
            <param name="origin">The origin Vector2.</param>
            <param name="target">The target Vector2.</param>
            <param name="maxDistance">The max distance of the returned Vector2 from the origin.</param>
            <returns>The new Vector2 based on the origin in the direction of the target.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.ToWorldPos(UnityEngine.Vector2)">
            <summary>
            Convert from screen position to world position using the main camera.
            </summary>
            <param name="v2">The Vector2</param>
            <returns>The world position.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.CloneAndChange(UnityEngine.Vector3,Marvelous.V3Axis,System.Single)">
            <summary>
            Create a new Vector3 based on the base Vector3, but with one axis value changed.
            </summary>
            <param name="baseV3">The base Vector3.</param>
            <param name="axis">The axis to change.</param>
            <param name="val">The new value of the axis to change.</param>
            <returns>A new Vector3 based on the base Vector3, but with one axis value changed.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.ToVector2(UnityEngine.Vector2)">
            <summary>
            Creates a Vector2 from a Vector3.
            </summary>
            <param name="v3">The Vector3.</param>
            <returns>A new Vector3 based on the Vector2.</returns>
        </member>
        <member name="M:Marvelous.Marvelous.TowardsTarget(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Calculates a new position based on the origin in the direction of the target.
            </summary>
            <param name="origin">The origin Vector3.</param>
            <param name="target">The target Vector3.</param>
            <param name="maxDistance">The max distance of the returned Vector3 from the origin.</param>
            <returns>The new Vector3 based on the origin in the direction of the target.</returns>
        </member>
        <member name="M:Marvelous.Extensions.GetRandom``1(``0[])">
            <summary>
            Get a random item from the array.
            </summary>
            <param name="array">The array.</param>
            <typeparam name="T">Type of array.</typeparam>
            <returns>Random item from array.</returns>
            <exception cref="T:System.Exception">Thrown if array is null or empty.</exception>
        </member>
        <member name="M:Marvelous.Extensions.GetOrthographicWorldScreenHeight(UnityEngine.Camera)">
            <summary>
            Get the camera's viewport world height.
            </summary>
            <param name="camera">The camera.</param>
            <returns>The height.</returns>
            <exception cref="T:System.Exception">Thrown if the camera is not orthographic.</exception>
        </member>
        <member name="M:Marvelous.Extensions.GetOrthographicWorldScreenWidth(UnityEngine.Camera)">
            <summary>
            Get the camera's viewport world width.
            </summary>
            <param name="camera">The camera.</param>
            <returns>The width.</returns>
            <exception cref="T:System.Exception">Thrown if the camera is not orthographic.</exception>
        </member>
        <member name="M:Marvelous.Extensions.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
            Tries to get a component on the the GameObject. If the component doesn't exists it adds it and return the newly added component.
            </summary>
            <param name="gameObject">The GameObject.</param>
            <typeparam name="T">The type of component.</typeparam>
            <returns>The existing or newly created component.</returns>
        </member>
        <member name="M:Marvelous.Extensions.HasComponent``1(UnityEngine.GameObject)">
            <summary>
            Check if a GameObject has a component or not.
            </summary>
            <param name="gameObject"></param>
            <typeparam name="T">The type of component.</typeparam>
            <returns>True if the component exists on the GameObject, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Extensions.AddIfNotExists``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Adds an item to the IList if it doesn't already exists.
            </summary>
            <param name="list">The IList to add an item to.</param>
            <param name="item">The item to add.</param>
            <typeparam name="T">The type of the item.</typeparam>
            <returns>True if the item was added, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Extensions.ChainableAdd``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Adds an item to the IList and then returns the IList.
            </summary>
            <param name="list">The IList to add the item to.</param>
            <param name="item">The item to add.</param>
            <typeparam name="T">The type of the item.</typeparam>
            <returns>The IList.</returns>
        </member>
        <member name="M:Marvelous.Extensions.Every``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            The Every method tests whether all elements in the array pass the test implemented by the provided Func.
            </summary>
            <param name="list">The IList to test.</param>
            <param name="func">The Func that implements the test.</param>
            <typeparam name="T">The type of the items in the IList.</typeparam>
            <returns>True if all elements in the IList passes the test, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Extensions.First``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first item that satisfies the condition.
            </summary>
            <param name="list">The IList to search.</param>
            <param name="condition">Condition to test.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <returns>The first item that satisfies the condition. If none found it returns default(T).</returns>
        </member>
        <member name="M:Marvelous.Extensions.First``2(System.Collections.Generic.IList{``0},System.Func{``0,``1,System.Boolean},``1)">
            <summary>
            Returns the first item that satisfies the condition.
            </summary>
            <param name="list">The IList to search.</param>
            <param name="condition">Condition to test.</param>
            <param name="param1">The 1st parameter to send to the condition.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <returns>The first item that satisfies the condition. If none found it returns default(T).</returns>
        </member>
        <member name="M:Marvelous.Extensions.ForEach``2(System.Collections.Generic.IList{``0},System.Action{``0,``1},``1)">
            <summary>
            Performs an action on each item in the list passing parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEach``3(System.Collections.Generic.IList{``0},System.Action{``0,``1,``2},``1,``2)">
            <summary>
            Performs an action on each item in the list passing parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <param name="param2">The 2nd parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <typeparam name="P2">The param2 type.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEach``4(System.Collections.Generic.IList{``0},System.Action{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Performs an action on each item in the list passing parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <param name="param2">The 2nd parameter to send to the action.</param>
            <param name="param3">The 3rd parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <typeparam name="P2">The param2 type.</typeparam>
            <typeparam name="P3">The param3 type.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEach``3(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Action{``1,``2},``2)">
            <summary>
            Performs an action on each selected item in the list passing parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="selector">Func that selects V from the list item that will be passed to the Action</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="V">The type returned by the selector.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEach``4(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Action{``1,``2,``3},``2,``3)">
            <summary>
            Performs an action on each selected item in the list passing parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="selector">Func that selects V from the list item that will be passed to the Action</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <param name="param2">The 2nd parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="V">The type returned by the selector.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <typeparam name="P2">The param2 type.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEach``5(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Action{``1,``2,``3,``4},``2,``3,``4)">
            <summary>
            Performs an action on each selected item in the list passing parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="selector">Func that selects V from the list item that will be passed to the Action</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <param name="param2">The 2nd parameter to send to the action.</param>
            <param name="param3">The 3rd parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="V">The type returned by the selector.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <typeparam name="P2">The param2 type.</typeparam>
            <typeparam name="P3">The param3 type.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs an action on each item in the list passing item index and parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <typeparam name="T">The type of the items.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEach``2(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32,``1},``1)">
            <summary>
            Performs an action on each item in the list passing item index and parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEach``3(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32,``1,``2},``1,``2)">
            <summary>
            Performs an action on each item in the list passing item index and parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <param name="param2">The 2nd parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <typeparam name="P2">The param2 type.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEach``4(System.Collections.Generic.IList{``0},Marvelous.Action{``0,System.Int32,``1,``2,``3},``1,``2,``3)">
            <summary>
            Performs an action on each item in the list passing item index and parameter(s) to the action.
            </summary>
            <param name="list">The IList to iterate over.</param>
            <param name="action">The action to be executed.</param>
            <param name="param1">The 1st parameter to send to the action.</param>
            <param name="param2">The 2nd parameter to send to the action.</param>
            <param name="param3">The 3rd parameter to send to the action.</param>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">The param1 type.</typeparam>
            <typeparam name="P2">The param2 type.</typeparam>
            <typeparam name="P3">The param3 type.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.GetOrInstantiate``1(System.Collections.Generic.IList{``0},UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion,System.Func{``0,System.Boolean})">
            <summary>
            Get or instantiate a prefab from IList based on the test implemented by the provided Func.
            </summary>
            <param name="list">The IList to get the prefab from.</param>
            <param name="prefab">The prefab.</param>
            <param name="position">The position of the prefab returned.</param>
            <param name="quaternion">The rotation of the prefab returned.</param>
            <param name="condition">The condition to pass in order to get an already instantiated prefab from the IList.</param>
            <typeparam name="T">The type of prefab in the IList.</typeparam>
            <returns>The first prefab in the IList that satisfies the condition. If none found it returns a newly created prefab of type T.</returns>
        </member>
        <member name="M:Marvelous.Extensions.GetOrInstantiate(System.Collections.Generic.IList{UnityEngine.GameObject},UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion,System.Func{UnityEngine.GameObject,System.Boolean})">
            <summary>
            Get or instantiate a prefab from IList based on the test implemented by the provided Func.
            </summary>
            <param name="list">The IList to get the prefab from.</param>
            <param name="prefab">The prefab.</param>
            <param name="position">The position of the prefab returned.</param>
            <param name="quaternion">The rotation of the prefab returned.</param>
            <param name="condition">The condition to pass in order to get an already instantiated prefab from the IList.</param>
            <returns>The first prefab in the IList that satisfies the condition. If none found it returns a newly created prefab.</returns>
        </member>
        <member name="M:Marvelous.Extensions.InstantiateAndAdd``1(System.Collections.Generic.IList{``0},UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiates and adds the prefab to the IList.
            </summary>
            <param name="list">The IList to add the prefab to.</param>
            <param name="prefab">The prefab.</param>
            <param name="position">The position of the prefab returned.</param>
            <param name="quaternion">The rotation of the prefab returned.</param>
            <typeparam name="T">The type of prefab in the IList.</typeparam>
            <returns>The newly instantiated prefab.</returns>
        </member>
        <member name="M:Marvelous.Extensions.Pipe``1(System.Collections.Generic.IList{System.Func{``0,``0}})">
            <summary>
            Creates a pipe of all the Funcs in the IList.
            </summary>
            <param name="list">The IList containing the Func(s).</param>
            <typeparam name="T">The return and parameter type of the Func.</typeparam>
            <returns>A Func that is a pipe of all Funcs in the provided IList.</returns>
        </member>
        <member name="M:Marvelous.Extensions.Reduce``2(System.Collections.Generic.IList{``1},System.Func{``0,``0,``0},System.Func{``1,``0},``0,System.Func{``1,System.Boolean})">
            <summary>
            The Reduce method executes a reducer function (that you provide) on each element of the IList, resulting in a single output value.
            </summary>
            <param name="list">The IList to reduce.</param>
            <param name="reducer">Reducer Func.</param>
            <param name="getValue">Func to retrieve value that gets passed to the reducer.</param>
            <param name="initialValue">Initial value of the accumulator.</param>
            <param name="skip">If provided and true, skip the examined item.</param>
            <typeparam name="R">Return type.</typeparam>
            <typeparam name="T">The type of the items.</typeparam>
            <returns>A reduced value of type R.</returns>
        </member>
        <member name="M:Marvelous.Extensions.Reduce``3(System.Collections.Generic.IList{``1},System.Func{``0,``0,``2,``0},System.Func{``1,``0},``0,``2,System.Func{``1,System.Boolean})">
            <summary>
            The Reduce method executes a reducer function (that you provide) on each element of the IList, resulting in a single output value.
            </summary>
            <param name="list">The IList to reduce.</param>
            <param name="reducer">Reducer Func.</param>
            <param name="getValue">Func to retrieve value that gets passed to the reducer.</param>
            <param name="initialValue">Initial value of the accumulator.</param>
            <param name="reducerParam1">The 1st parameter to send to the reducer.</param>
            <param name="skip">If provided and true, skip the examined item.</param>
            <typeparam name="R">Return type.</typeparam>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="P1">Type of reducerParam1.</typeparam>
            <returns>A reduced value of type R.</returns>
        </member>
        <member name="M:Marvelous.Extensions.Some``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            The Some method tests whether at least one element in the IList passes the test implemented by the provided Func.
            </summary>
            <param name="list">The IList to test.</param>
            <param name="func">The Func that implements the test.</param>
            <typeparam name="T">The type of the items in the IList.</typeparam>
            <returns>True if at least one element in the IList passes the test, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Extensions.Some``2(System.Collections.Generic.IList{``0},System.Func{``0,``1,System.Boolean},``1)">
            <summary>
            The Some method tests whether at least one element in the IList passes the test implemented by the provided Func.
            </summary>
            <param name="list">The IList to test.</param>
            <param name="func">The Func that implements the test.</param>
            <param name="param1">The 1st parameter to send to the Func.</param>
            <typeparam name="T">The type of the items in the IList.</typeparam>
            <typeparam name="P1">The type of param1.</typeparam>
            <returns>True if at least one element in the IList passes the test, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Extensions.MergeObservables``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Merges 2 observables into one. It uses createCombinedModel to create what is returned on every OnNext.
            </summary>
            <param name="observable1">IObservable to be merged.</param>
            <param name="observable2">IObservable to be merged.</param>
            <param name="createCombinedModel">Used to merge and create the observable value of the new IObservable.</param>
            <param name="initialValue1">Initial value of observerable1.</param>
            <param name="initialValue2">Initial value of observerable2.</param>
            <typeparam name="T1">The type of the first IObservable.</typeparam>
            <typeparam name="T2">The type of the second IObservable.</typeparam>
            <typeparam name="M">Type of the new merged IObservable.</typeparam>
            <returns>A new IObservable of type M combining the IObservables sent in.</returns>
        </member>
        <member name="M:Marvelous.Extensions.MergeObservables``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Merges three observables into one. It uses createCombinedModel to create what is returned on every OnNext.
            </summary>
            <param name="observable1">IObservable to be merged.</param>
            <param name="observable2">IObservable to be merged.</param>
            <param name="observable3">IObservable to be merged.</param>
            <param name="createCombinedModel">Used to merge and create the observable value of the new IObservable.</param>
            <param name="initialValue1">Initial value of observerable1.</param>
            <param name="initialValue2">Initial value of observerable2.</param>
            <param name="initialValue3">Initial value of observerable3.</param>
            <typeparam name="T1">The type of the first IObservable.</typeparam>
            <typeparam name="T2">The type of the second IObservable.</typeparam>
            <typeparam name="T3">The type of the third IObservable.</typeparam>
            <typeparam name="M">Type of the new merged IObservable.</typeparam>
            <returns>A new IObservable of type M combining the IObservables sent in.</returns>
        </member>
        <member name="M:Marvelous.Extensions.MergeObservables``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Merges four observables into one. It uses createCombinedModel to create what is returned on every OnNext.
            </summary>
            <param name="observable1">IObservable to be merged.</param>
            <param name="observable2">IObservable to be merged.</param>
            <param name="observable3">IObservable to be merged.</param>
            <param name="observable4">IObservable to be merged.</param>
            <param name="createCombinedModel">Used to merge and create the observable value of the new IObservable.</param>
            <param name="initialValue1">Initial value of observerable1.</param>
            <param name="initialValue2">Initial value of observerable2.</param>
            <param name="initialValue3">Initial value of observerable3.</param>
            <param name="initialValue4">Initial value of observerable4.</param>
            <typeparam name="T1">The type of the first IObservable.</typeparam>
            <typeparam name="T2">The type of the second IObservable.</typeparam>
            <typeparam name="T3">The type of the third IObservable.</typeparam>
            <typeparam name="T4">The type of the fourth IObservable.</typeparam>
            <typeparam name="M">Type of the new merged IObservable.</typeparam>
            <returns>A new IObservable of type M combining the IObservables sent in.</returns>
        </member>
        <member name="M:Marvelous.Extensions.MergeObservables``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Merges five observables into one. It uses createCombinedModel to create what is returned on every OnNext.
            </summary>
            <param name="observable1">IObservable to be merged.</param>
            <param name="observable2">IObservable to be merged.</param>
            <param name="observable3">IObservable to be merged.</param>
            <param name="observable4">IObservable to be merged.</param>
            <param name="observable5">IObservable to be merged.</param>
            <param name="createCombinedModel">Used to merge and create the observable value of the new IObservable.</param>
            <param name="initialValue1">Initial value of observerable1.</param>
            <param name="initialValue2">Initial value of observerable2.</param>
            <param name="initialValue3">Initial value of observerable3.</param>
            <param name="initialValue4">Initial value of observerable4.</param>
            <param name="initialValue5">Initial value of observerable5.</param>
            <typeparam name="T1">The type of the first IObservable.</typeparam>
            <typeparam name="T2">The type of the second IObservable.</typeparam>
            <typeparam name="T3">The type of the third IObservable.</typeparam>
            <typeparam name="T4">The type of the fourth IObservable.</typeparam>
            <typeparam name="T5">The type of the fifth IObservable.</typeparam>
            <typeparam name="M">Type of the new merged IObservable.</typeparam>
            <returns>A new IObservable of type M combining the IObservables sent in.</returns>
        </member>
        <member name="M:Marvelous.Extensions.ClearInterval(UnityEngine.MonoBehaviour,UnityEngine.Coroutine)">
            <summary>
            Cancels a timed, action which was previously established by a call to SetInterval or SetTimeout.
            </summary>
            <param name="mb">MonoBehaviour that initiated the Coroutine.</param>
            <param name="coroutine">The coroutine to stop.</param>
        </member>
        <member name="M:Marvelous.Extensions.SetInterval(UnityEngine.MonoBehaviour,System.Action,System.Single)">
            <summary>
            SetInterval repeatedly calls a function, with a fixed time delay between each call.
            </summary>
            <param name="mb">MonoBehaviour that is going to start the Coroutine.</param>
            <param name="function">A function to be executed every delay seconds. </param>
            <param name="delay">The time, in seconds, the timer should delay in between executions of the specified function. </param>
            <returns>The underlying Coroutine started.</returns>
        </member>
        <member name="M:Marvelous.Extensions.SetTimeout(UnityEngine.MonoBehaviour,System.Action,System.Single)">
            <summary>
            Sets a timer which executes a function once the timer expires. This mimics javascript's API for timers and is utilizing Unity's Coroutine API to do so.
            </summary>
            <param name="mb">MonoBehaviour that is going to start the Coroutine.</param>
            <param name="function">A function to be executed after the timer expires.</param>
            <param name="delay">The time, in seconds, the timer should wait before the specified function is executed. </param>
            <returns>The underlying Coroutine started.</returns>
        </member>
        <member name="M:Marvelous.Extensions.FindDeepChild(UnityEngine.Transform,System.String)">
            <summary>
            Finds a child to this transform by name. Searches not only the first level in the
            tree hierarchy of child objects, but all the children, grand children, and so on.
            </summary>
            <param name="parent">The parent Transform to perform the search on.</param>
            <param name="name">The name to look for.</param>
            <returns>The child transform by the name specified. Returns null if no child was found.</returns>
        </member>
        <member name="M:Marvelous.Extensions.ForEachChild(UnityEngine.Transform,System.Action{UnityEngine.Transform})">
            <summary>
            Iterates over all the children and executes the Action specified.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
        </member>
        <member name="M:Marvelous.Extensions.ForEachChild``1(UnityEngine.Transform,System.Action{UnityEngine.Transform,``0},``0)">
            <summary>
            Iterates over all the children and executes the Action specified.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
            <param name="param1">Parameter sent to the Action.</param>
            <typeparam name="P1">Type of param1.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEachChild``2(UnityEngine.Transform,System.Action{UnityEngine.Transform,``0,``1},``0,``1)">
            <summary>
            Iterates over all the children and executes the Action specified.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
            <param name="param1">Parameter sent to the Action.</param>
            <param name="param2">Parameter sent to the Action.</param>
            <typeparam name="P1">Type of param1.</typeparam>
            <typeparam name="P2">Type of param2.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEachChild``3(UnityEngine.Transform,System.Action{UnityEngine.Transform,``0,``1,``2},``0,``1,``2)">
            <summary>
            Iterates over all the children and executes the Action specified.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
            <param name="param1">Parameter sent to the Action.</param>
            <param name="param2">Parameter sent to the Action.</param>
            <param name="param3">Parameter sent to the Action.</param>
            <typeparam name="P1">Type of param1.</typeparam>
            <typeparam name="P2">Type of param2.</typeparam>
            <typeparam name="P3">Type of param3.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEachChild(UnityEngine.Transform,System.Action{UnityEngine.Transform,System.Int32})">
            <summary>
            Iterates over all the children and executes the Action specified. Action will get passed the child's index.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
        </member>
        <member name="M:Marvelous.Extensions.ForEachChild``1(UnityEngine.Transform,System.Action{UnityEngine.Transform,System.Int32,``0},``0)">
            <summary>
            Iterates over all the children and executes the Action specified. Action will get passed the child's index.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
            <param name="param1">Parameter sent to the Action.</param>
            <typeparam name="P1">Type of param1.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEachChild``2(UnityEngine.Transform,System.Action{UnityEngine.Transform,System.Int32,``0,``1},``0,``1)">
            <summary>
            Iterates over all the children and executes the Action specified. Action will get passed the child's index.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
            <param name="param1">Parameter sent to the Action.</param>
            <param name="param2">Parameter sent to the Action.</param>
            <typeparam name="P1">Type of param1.</typeparam>
            <typeparam name="P2">Type of param2.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.ForEachChild``3(UnityEngine.Transform,Marvelous.Action{UnityEngine.Transform,System.Int32,``0,``1,``2},``0,``1,``2)">
            <summary>
            Iterates over all the children and executes the Action specified. Action will get passed the child's index.
            </summary>
            <param name="transform">The Transform with the children to iterate.</param>
            <param name="action">The Action to be executed.</param>
            <param name="param1">Parameter sent to the Action.</param>
            <param name="param2">Parameter sent to the Action.</param>
            <param name="param3">Parameter sent to the Action.</param>
            <typeparam name="P1">Type of param1.</typeparam>
            <typeparam name="P2">Type of param2.</typeparam>
            <typeparam name="P3">Type of param3.</typeparam>
        </member>
        <member name="M:Marvelous.Extensions.SetParent(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Sets a parent of the Transform provided.
            </summary>
            <param name="transform">The Transform to set the parent on.</param>
            <param name="parent">The parent to add to the transform.</param>
            <returns>The Transform with the new parent.</returns>
        </member>
        <member name="M:Marvelous.Extensions.TraverseAndExecute(UnityEngine.Transform,System.Action{UnityEngine.Transform})">
            <summary>
            Traverse all the children of the transform and executes the Action on this transform,
            as well as on all the children recursively.
            </summary>
            <param name="current">The current Transform to execute the Action on.</param>
            <param name="action">The Action to executed.</param>
        </member>
        <member name="M:Marvelous.Extensions.TraverseExecuteAndCheck(UnityEngine.Transform,System.Func{UnityEngine.Transform,System.Boolean})">
            <summary>
            Traverse all the children of the transform and executes the Func on this transform,
            as well as on all the children.
            </summary>
            <param name="current">The current Transform to execute the Func on.</param>
            <param name="func">The Func to executed.</param>
            <returns>True if all of the funcs returns true, otherwise false.</returns>
        </member>
        <member name="M:Marvelous.Extensions.ToVector3(UnityEngine.Vector2,System.Single)">
            <summary>
            Creates a Vector3 from a Vector2.
            </summary>
            <param name="v2">The Vector2.</param>
            <param name="z">The z-value of the new Vector3.</param>
            <returns>A new Vector3 based on the Vector2.</returns>
        </member>
        <member name="M:Marvelous.Extensions.TowardsTarget(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Calculates a new position based on the origin in the direction of the target.
            </summary>
            <param name="origin">The origin Vector2.</param>
            <param name="target">The target Vector2.</param>
            <param name="maxDistance">The max distance of the returned Vector2 from the origin.</param>
            <returns>The new Vector2 based on the origin in the direction of the target.</returns>
        </member>
        <member name="M:Marvelous.Extensions.ToWorldPos(UnityEngine.Vector2)">
            <summary>
            Convert from screen position to world position using the main camera.
            </summary>
            <param name="v2">The Vector2</param>
            <returns>The world position.</returns>
        </member>
        <member name="M:Marvelous.Extensions.CloneAndChange(UnityEngine.Vector3,Marvelous.V3Axis,System.Single)">
            <summary>
            Create a new Vector3 based on the base Vector3, but with one axis value changed.
            </summary>
            <param name="baseV3">The base Vector3.</param>
            <param name="axis">The axis to change.</param>
            <param name="val">The new value of the axis to change.</param>
            <returns>A new Vector3 based on the base Vector3, but with one axis value changed.</returns>
        </member>
        <member name="M:Marvelous.Extensions.ToVector2(UnityEngine.Vector2)">
            <summary>
            Creates a Vector2 from a Vector3.
            </summary>
            <param name="v3">The Vector3.</param>
            <returns>A new Vector3 based on the Vector2.</returns>
        </member>
        <member name="M:Marvelous.Extensions.TowardsTarget(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Calculates a new position based on the origin in the direction of the target.
            </summary>
            <param name="origin">The origin Vector3.</param>
            <param name="target">The target Vector3.</param>
            <param name="maxDistance">The max distance of the returned Vector3 from the origin.</param>
            <returns>The new Vector3 based on the origin in the direction of the target.</returns>
        </member>
    </members>
</doc>
